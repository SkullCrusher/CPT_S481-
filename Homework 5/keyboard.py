from tkinter import *from layout import *"""Keyboard class: used to create a onscreen keyboard,pass a frame container and the callback to handle the keypress to the init."""class Keyboard(Frame):    """    Pass a parent frame or higher up and the callback to handle the keypress.    """    def __init__(self, parent, callback):        self.State = "Normal"        self.ShiftDepth = 0        Frame.__init__(self)        self._PlaceKeys(parent, callback)    """    Checks the key press and decides how to migrate the data up to the callback.    """    def ButtonPressHook(self, key, callback):            # Handle the shift key.        if key == "Shift":            if self.State == "Shift" or self.State == "Cap":                self.State = "Normal"                self.ShiftDepth = 2            else:                self.State = "Shift"                self.ShiftDepth = 0            return            # Handle the cap lock key.        if key == "CapsLock":            if self.State == "Cap":                self.State = "Normal"            else:                self.State = "Cap"            return        # Reset the shift if it has been used more than once.        if self.State == "Shift" and self.ShiftDepth > 0:            self.State = "Normal"        self.ShiftDepth += 1        # The three cases.        # Letters.        if key[0].isalpha():            if self.State == "Normal":                callback(key.lower())            else:                callback(key.upper())            return        # Dual-symbol: pass upper symbol if shift.        if "\n" in key:            if self.State == "Shift":                callback(key[0])            else:                callback(key[2])            return        # Special        callback(key)    """    This creates a callback lambda function, it is done in a function to prevent overwriting old variables.    """    def _attempt(self, localcopy, callback):        return lambda: (self.ButtonPressHook(localcopy, callback))    """    Sets the keys into the frame.    """    def _PlaceKeys(self, root, callback):        RowIndex = 0        ColumnIndex = 0            # go through the file made by bobl to build the keys.        for Rows in layout:            for Columns in Rows:                    # if it is a normal single key set it in place using this                if Columns[1] == 1:                    quitButton2 = Button(root, text=Columns[0], command= self._attempt(Columns[0], callback), height = 2, width = 4)                    quitButton2.grid(row=RowIndex, column = ColumnIndex, columnspan = 10 * Columns[1], padx=5, pady=5)                else:                    # non-standard key like shift or space so place it in using special stuff                    quitButton2 = Button(root, text=Columns[0], command= self._attempt(Columns[0], callback), height=2, width=6 * Columns[1])                    quitButton2.grid(row=RowIndex, column=ColumnIndex, columnspan= 10 * Columns[1], padx=2, pady=2)                ColumnIndex += 10 * Columns[1]            RowIndex += 10            ColumnIndex = 0        return root    # self test.if __name__ == '__main__':    print("David Self Test")    def press(key):        print(key)    root = Tk()    root.title('keyboard Module Self-Test')    kbd = Keyboard(root, press)    kbd.grid()    root.mainloop()