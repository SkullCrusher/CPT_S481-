#!/usr/bin/python3

import sys
from concordance import concordance

GlobalDictionary = {}
GlobalCounts = {}

# the start of the html page.
HTML_PRE = "<!DOCTYPE html><html><head><style>table {font-family: arial, sans-serif;border-collapse: collapse;width: 100%;}td,th{border: 1px solid #dddddd;text-align: left;padding: 8px;}tr:nth-child(even) {background-color: #dddddd;}</style></head><body>"
HTML_POST = "</body></html>"

	# if it should be exported to html?
ExportToHTML = False

	# Remove the filename, sort the files, and load and parse them.
def Process_Arguments(arg):
	Filename = []
	
	# required for it to see the global.
	global ExportToHTML
	
	for x in range(1, len(arg)):
		if arg[x] == "-h":
			ExportToHTML = True
		else:
			Filename.append([arg[x]])
	
	Filename.sort()

	return Filename
	

Filename = Process_Arguments(sys.argv)

def ExportHTML(list):

	Output = HTML_PRE + "<table><th>Word</th><th>Filename</th><th>Locations</th></tr>";

	keys = []

	for x in GlobalDictionary.keys():
		keys.append([x][0])
	
	# sort the keys so they are references in the correct order.
	keys.sort()
	
	for x in keys:
		
		First = True
		
		for c in GlobalDictionary[x]:
		
			
		
			if(First):
				c = c.split(":")
				
				Output = "{}<tr><th>{} ({})</th><th>{}</th><th>{}</th>".format(Output, x, GlobalCounts[x], c[0], c[1])
				First = False
			else:
				c = c[0].split(":")
			
				Output = "{}<tr><th>{} ({})</th><th>{}</th><th>{}</th>".format(Output, x, GlobalCounts[x], c[0], c[1])
		
	# output the result
	print(Output + HTML_POST)
	

	# add the words to the data.
def PrintList(list):

		# if it should be exported.
	if ExportToHTML == True:
		ExportHTML(list)		
		return
	else:
		print(ExportToHTML)

	keys = []

	for x in GlobalDictionary.keys():
		keys.append([x][0])
	
	# sort the keys so they are references in the correct order.
	keys.sort()
	
	for x in keys:
		print("{} ({}):".format(x, GlobalCounts[x]))
		
		First = True
		
		for c in GlobalDictionary[x]:
			if(First):
				print("\t{}".format(c))
				First = False
			else:
				print("\t{}".format(c[0]))
				
		print("")

		
	# Loop through all of the files.
for file in Filename:
	Ret_Data = concordance(file[0], False)
	
	
	for x in Ret_Data.keys():
		# check if the key exists in the global database.
		
		# Create a new record.
		
		tempstring = "{}:".format(file[0])
			
		# should it have a comma before?
		IsFirst = True
		
		#This needs to skip keys that already were inserted
		SkipList = []
						
		for line in Ret_Data[x]:
			ShouldSkip = False
			
			# skip if already added.
			for Temp in SkipList:
				if Temp[0] == line:
					ShouldSkip = True
					break
					
			if ShouldSkip:
				continue;
		
			# How many of that line found?
			Found = 0
			
			# look for how many of that kind are there.
			for t in Ret_Data[x]:
				if t == line:
					Found += 1
					
			SkipList.append([line])
			
					
			if IsFirst:
				
				if Found == 1:
					tempstring = "{} {}".format(tempstring, line)
				else:
					tempstring = "{} {}({})".format(tempstring, line, Found)
				IsFirst = False
			else:
				if Found == 1:
					tempstring = "{}, {}".format(tempstring, line)
				else:
					tempstring = "{}, {}({})".format(tempstring, line, Found)
				
		
			# add to the count
			if x in GlobalCounts:
				GlobalCounts[x] += Found#1
			else:
				GlobalCounts[x] = Found#1
		
		if x in GlobalDictionary:
			#append a existing record.
			GlobalDictionary[x].append([tempstring])
		else:
			GlobalDictionary[x] = [tempstring]
	

#display the results.
PrintList(GlobalDictionary)
